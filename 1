#include <iostream>
using namespace std;

class node {
public:
    int data;
    node* next;
};

int traverse(node* n) {
    int count = 0;
    while (n) {
        cout << n->data << " ";
        count++;
        n = n->next;
    }
    return count;
}

int size(node* sahil) {
    int count = 0;
    while (sahil) {
        sahil = sahil->next;
        count++;
    }
    return count;
}

node* insertathead(node* head, int n) {
    node* ptr;
    ptr = new node;
    ptr->data = n;
    ptr->next = head;
    head = ptr;
    return head;
}

node* insertmid(node* head, int position, int n) {
    node* ptr;
    ptr = new node;
    ptr->data = n;

    if (position == 1) {
        ptr->next = head;
        head = ptr;
        return head;
    }

    node* temp = head;
    for (int i = 1; i < position - 1 && temp != nullptr; i++) {
        temp = temp->next;
    }

    if (temp == nullptr) {
        cout << "Position out of bounds.\n";
        return head;
    }

    ptr->next = temp->next;
    temp->next = ptr;
    return head;
}

node* removefromhead(node* head) {
    if (head == nullptr) {
        cout << "List is empty.\n";
        return head;
    }

    node* temp = head;
    head = head->next;
    delete temp;
    return head;
}

node* removefrompos(node* head, int position) {
    if (head == nullptr) {
        cout << "List is empty.\n";
        return head;
    }

    if (position == 1) {
        node* temp = head;
        head = head->next;
        delete temp;
        return head;
    }

    node* temp = head;
    for (int i = 1; i < position - 1 && temp != nullptr; i++) {
        temp = temp->next;
    }

    if (temp == nullptr || temp->next == nullptr) {
        cout << "Position out of bounds.\n";
        return head;
    }

    node* toDelete = temp->next;
    temp->next = toDelete->next;
    delete toDelete;
    return head;
}

node* search(node* head, int x) {
    node* temp = head;
    while (temp != nullptr) {
        if (temp->data == x) {
            return temp;
        }
        temp = temp->next;
    }
    return nullptr;
}

int main() {
    node* head = nullptr;

    head = insertathead(head, 33);
    head = insertathead(head, 22);
    head = insertathead(head, 11);

    cout << "Original List: ";
    traverse(head);
    cout << "\n";

    head = removefromhead(head);
    cout << "List after removing from the beginning: ";
    traverse(head);
    cout << "\n";

    head = insertmid(head, 2, 55);
    cout << "List after inserting at position 2: ";
    traverse(head);
    cout << "\n";

    head = removefrompos(head, 2);
    cout << "List after removing from position 2: ";
    traverse(head);
    cout << "\n";

    int searchElement = 55;
    node* result = search(head, searchElement);
    if (result != nullptr) {
        cout << searchElement << " found at address: " << result << "\n";
    } else {
        cout << searchElement << " not found in the list.\n";
    }

    return 0;
}
