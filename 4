#include <iostream>
#include <stack>
#include <cctype>
using namespace std;

class Stack {
private:
    int* arr;
    int size;
    int top;

public:
    Stack(int sz) {
        size = sz;
        top = -1;
        arr = new int[size];
    }

    void push(int x) {
        if (top == size - 1) {
            cout << "Stack full" << endl;
        }
        top++;
        arr[top] = x;
    }

    void pop() {
        if (top == -1) {
            cout << "Stack empty" << endl;
        }
        top--;
    }

    int Top() {
        if (top == -1) {
            cout << "Inside Top() Stack is empty";
            return -1;
        }
        return arr[top];
    }

    bool isEmpty() {
        return top == -1;
    }
};

int evaluatePostfix(string exp) {
    Stack stack(exp.length());

    for (char& c : exp) {
        if (isdigit(c)) {
            stack.push(c - '0');  // Convert char to integer
        } else {
            int operand2 = stack.Top();
            stack.pop();
            int operand1 = stack.Top();
            stack.pop();

            switch (c) {
                case '+':
                    stack.push(operand1 + operand2);
                    break;
                case '-':
                    stack.push(operand1 - operand2);
                    break;
                case '*':
                    stack.push(operand1 * operand2);
                    break;
                case '/':
                    stack.push(operand1 / operand2);
                    break;
                default:
                    cout << "Invalid operator" << endl;
                    return -1;
            }
        }
    }

    return stack.Top();
}

int main() {
    string postfixExp = "23*5+";
    int result = evaluatePostfix(postfixExp);

    if (result != -1) {
        cout << "Result of the postfix expression " << postfixExp << " is: " << result << endl;
    }

    return 0;
}
